---
description: Comprehensive guide for Tailwind CSS 4 with Shadcn UI components and Next.js best practices.
globs: **/*.tsx
alwaysApply: false
---

# Tailwind CSS 4 + Shadcn UI with Next.js

## Core Philosophy

You are an expert in Shadcn UI, Radix UI, and Tailwind CSS 4. When generating UI code, prioritize the use of Shadcn UI components over custom UI elements.

### Component Priority

- **Always prefer Shadcn components:** Use Shadcn UI components instead of building custom UI elements from scratch
- **Install missing components:** If a required Shadcn component is not found, prompt to install it using `pnpm dlx shadcn@latest add <component-name>`
- **Leverage Radix primitives:** Utilize the accessibility and behavior features built into Radix UI components

### Integration Best Practices

- **Tailwind CSS 4 styling:** Apply Tailwind CSS 4 utilities for styling Shadcn components
- **Theme consistency:** Ensure components adhere to the project's Shadcn theme and color palette
- **Responsive design:** Ensure components are responsive using Tailwind's responsive utilities
- **Performance optimization:** Minimize client-side JavaScript by leveraging server-component friendly nature

## Shadcn UI Setup & Integration

### Initial Setup

- Install Shadcn UI in your Next.js project:

```bash
pnpm dlx shadcn@latest init
```

- Install common Shadcn components:

```bash
pnpm dlx shadcn@latest add button card input label form dialog sheet
```

### Shadcn + Tailwind 4 Theme Configuration

- Configure your `components.json` for Tailwind 4 compatibility:

```json
{
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}
```

### Shadcn Component Examples with Tailwind 4

```tsx
// Using Shadcn Button with Tailwind 4 features
import { Button } from '@/components/ui/button';

export function ModernButton() {
  return (
    <Button
      className='@container bg-gradient-to-r from-blue-600 to-purple-600
                 hover:from-blue-700 hover:to-purple-700
                 transform-3d hover:scale-105 transition-all duration-200
                 shadow-lg hover:shadow-xl'
    >
      Tailwind 4 + Shadcn Button
    </Button>
  );
}
```

```tsx
// Shadcn Card with container queries and 3D transforms
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';

export function InteractiveCard() {
  return (
    <Card
      className='@container group cursor-pointer transform-3d
                     hover:rotate-y-2 hover:rotate-x-1 transition-all duration-300
                     hover:shadow-2xl'
    >
      <CardHeader>
        <CardTitle
          className='@sm:text-lg @md:text-xl @lg:text-2xl
                             group-hover:text-primary transition-colors'
        >
          Responsive Card Title
        </CardTitle>
      </CardHeader>
      <CardContent className='@container'>
        <p className='@sm:text-sm @md:text-base text-muted-foreground'>
          Container query responsive content with Shadcn styling
        </p>
      </CardContent>
    </Card>
  );
}
```

## Next.js Setup & Installation

- Install Tailwind CSS 4 for Next.js:

```bash
pnpm install tailwindcss@next @tailwindcss/postcss@next
```

- Update `postcss.config.mjs` with the new plugin:

```js
// postcss.config.mjs
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    '@tailwindcss/postcss': {},
  },
};

export default config;
```

- Replace your CSS imports in `app/globals.css` with Shadcn + Tailwind 4 configuration:

```css
/* app/globals.css - Tailwind 4 + Shadcn UI */
@import 'tailwindcss';

@layer base {
  :root {
    /* Shadcn UI CSS variables */
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 221.2 83.2% 53.3%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96%;
    --secondary-foreground: 222.2 84% 4.9%;
    --muted: 210 40% 96%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96%;
    --accent-foreground: 222.2 84% 4.9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 221.2 83.2% 53.3%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 217.2 91.2% 59.8%;
    --primary-foreground: 222.2 84% 4.9%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 224.3 76.3% 94.1%;
  }
}

@theme {
  /* Next.js optimized fonts */
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);

  /* Custom Tailwind 4 variables that work with Shadcn */
  --breakpoint-3xl: 1920px;
  --ease-fluid: cubic-bezier(0.3, 0, 0, 1);

  /* Enhanced gradients for modern UI */
  --gradient-primary: linear-gradient(135deg, hsl(var(--primary)) 0%, hsl(var(--primary)) 100%);
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}
```

## Next.js Font Integration

- Use Next.js fonts with Tailwind 4 CSS variables:

```tsx
// app/layout.tsx
import { GeistSans } from 'geist/font/sans';
import { GeistMono } from 'geist/font/mono';
import './globals.css';

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang='en' className={`${GeistSans.variable} ${GeistMono.variable}`}>
      <body className='font-sans antialiased'>{children}</body>
    </html>
  );
}
```

```css
/* In your CSS */
@theme {
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}
```

## Core Changes

- Use CSS-first configuration with `@theme` directive instead of JavaScript config `tailwind.config.js`:

```css
@import 'tailwindcss';

@theme {
  --font-display: 'Satoshi', 'sans-serif';
  --breakpoint-3xl: 1920px;
  --color-avocado-500: oklch(0.84 0.18 117.33);
  --ease-fluid: cubic-bezier(0.3, 0, 0, 1);
}
```

- Use `@import "tailwindcss"` for all Tailwind styles:

```css
@import 'tailwindcss';
```

- Package names for Next.js:
  - PostCSS plugin: `@tailwindcss/postcss`
  - CLI: `@tailwindcss/cli`
  - For Vite projects: `@tailwindcss/vite`

## Theme Configuration

- Use CSS variables for all design tokens:

```css
/* In CSS */
.custom-element {
  background-color: var(--color-blue-500);
  font-family: var(--font-sans);
}
```

- Available CSS variable namespaces:
  - `--color-*`: Colors (e.g., `--color-blue-500`)
  - `--font-*`: Font families (e.g., `--font-sans`)
  - `--text-*`: Font sizes (e.g., `--text-xl`)
  - `--font-weight-*`: Font weights (e.g., `--font-weight-bold`)
  - `--spacing-*`: Spacing values (e.g., `--spacing-4`)
  - `--radius-*`: Border radius (e.g., `--radius-md`)
  - `--shadow-*`: Box shadows (e.g., `--shadow-lg`)

- Override entire namespaces or the whole theme:

```css
@theme {
  /* Override all font variables */
  --font-*: initial;

  /* Override the entire theme */
  --*: initial;
}
```

## Container Queries

- Use container queries with `@container` and container-based breakpoints:

```html
<!-- Create a container context -->
<div class="@container">
  <!-- Elements that respond to container size, not viewport -->
  <div class="@sm:text-lg @md:text-xl @lg:text-2xl">Responsive to container</div>
</div>
```

- Use max-width container queries and ranges:

```html
<div class="@container">
  <!-- Hidden when container is between md and xl breakpoints -->
  <div class="@max-md:block @min-md:@max-xl:hidden @min-xl:block">Conditionally visible</div>
</div>
```

## 3D Transforms

- Use 3D transforms with new utilities:

```html
<!-- Enable 3D transforms -->
<div class="transform-3d rotate-x-12 rotate-y-6 translate-z-4 perspective-distant">
  3D transformed element
</div>

<!-- Control backface visibility -->
<div class="transform-3d rotate-y-180 backface-hidden">Card back (hidden when flipped)</div>
```

## Enhanced Gradients

- Use new gradient syntax and features:

```html
<!-- Linear gradient with specific angle -->
<div class="bg-linear-45 from-blue-500 to-purple-500">45-degree gradient</div>

<!-- Gradient with specific color space interpolation -->
<div class="bg-linear-to-r/oklch from-blue-500 to-red-500">
  Linear gradient with OKLCH interpolation
</div>

<!-- Conic and radial gradients -->
<div class="bg-conic from-red-500 via-yellow-500 to-green-500">Conic gradient</div>

<div class="bg-radial-[at_25%_25%] from-amber-500 to-transparent">
  Radial gradient with custom position
</div>
```

## New Variants

- Use composable variants by chaining them:

```html
<div class="group">
  <!-- Only visible when parent has data-active attribute and is hovered -->
  <span class="opacity-0 group-has-data-active:group-hover:opacity-100">
    Conditionally visible
  </span>
</div>
```

- Use new variants:

```html
<!-- Styles applied during CSS transitions -->
<div class="opacity-0 starting:opacity-100 transition">Fade in on initial render</div>

<!-- Target elements that are not in a specific state -->
<div class="not-first:mt-4">Margin top on all but first item</div>

<!-- Target specific nth-child positions -->
<ul>
  <li class="nth-3:bg-gray-100">Every third item has gray background</li>
</ul>

<!-- Target all descendants -->
<div class="**:text-gray-800">All text inside is gray-800</div>
```

## Custom Extensions

- Create custom utilities with `@utility` directive:

```css
@utility tab-4 {
  tab-size: 4;
}

/* Usage */
<pre class="tab-4">
  Indented with tabs
</pre>
```

- Create custom variants with `@variant` directive:

```css
@variant pointer-coarse (@media (pointer: coarse));
@variant theme-midnight (&:where([data-theme="midnight"] *));

/* Usage */
<button class="pointer-coarse:p-4">
  Larger padding on touch devices
</button>
```

- Use plugins with `@plugin` directive:

```css
@plugin "@tailwindcss/typography";
```

## CSS Variables in Arbitrary Values

- Use new syntax for CSS variables in arbitrary values:

```html
<div class="bg-(--brand-color)">Using CSS variable</div>
```

## Updated Utility Names

- Some utilities have been renamed for consistency:

```html
<div class="shadow-xs rounded-xs blur-xs"></div>
```

## Next.js Server & Client Components with Shadcn UI

- Server Components work seamlessly with Shadcn UI and Tailwind 4:

```tsx
// app/components/ServerCard.tsx (Server Component)
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';

export default function ServerCard({
  title,
  content,
  status,
}: {
  title: string;
  content: string;
  status: string;
}) {
  return (
    <Card
      className='@container hover:shadow-lg transition-all duration-200
                     transform-3d hover:translate-y-[-2px]'
    >
      <CardHeader className='@container'>
        <div className='flex items-center justify-between'>
          <CardTitle className='@sm:text-lg @md:text-xl @lg:text-2xl'>{title}</CardTitle>
          <Badge variant='secondary'>{status}</Badge>
        </div>
      </CardHeader>
      <CardContent>
        <p className='text-muted-foreground leading-relaxed @sm:text-sm @md:text-base'>{content}</p>
      </CardContent>
    </Card>
  );
}
```

- Client Components with Shadcn UI and interactive Tailwind 4 features:

```tsx
'use client';

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';

export default function InteractiveCard() {
  const [isActive, setIsActive] = useState(false);

  return (
    <Card
      className={`
      @container group cursor-pointer transform-3d transition-all duration-300
      ${
        isActive
          ? 'rotate-y-6 rotate-x-2 shadow-2xl scale-105 bg-primary/5'
          : 'hover:rotate-y-2 hover:rotate-x-1 hover:shadow-lg'
      }
    `}
    >
      <CardContent className='p-6'>
        <div className='space-y-4'>
          <h3 className='text-lg font-semibold group-hover:text-primary transition-colors'>
            Interactive Shadcn Card
          </h3>
          <p className='text-muted-foreground @sm:text-sm @md:text-base'>
            Container queries with 3D transforms and Shadcn styling
          </p>
          <Button
            variant={isActive ? 'default' : 'outline'}
            onClick={() => setIsActive(!isActive)}
            className='w-full transition-all duration-200 transform-3d
                       hover:scale-105 hover:shadow-md'
          >
            {isActive ? 'Active State' : 'Click to Activate'}
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}
```

### Form Components with Shadcn + Tailwind 4

```tsx
'use client';

import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';

export default function ModernForm() {
  return (
    <Card
      className='@container w-full max-w-md mx-auto transform-3d
                     hover:rotate-y-1 transition-all duration-300'
    >
      <CardHeader className='space-y-1'>
        <CardTitle className='@sm:text-xl @md:text-2xl text-center'>Modern Form</CardTitle>
      </CardHeader>
      <CardContent className='space-y-4'>
        <div className='space-y-2'>
          <Label htmlFor='email' className='@sm:text-sm @md:text-base'>
            Email
          </Label>
          <Input
            id='email'
            type='email'
            placeholder='Enter your email'
            className='transition-all duration-200 focus:transform-3d
                       focus:scale-[1.02] focus:shadow-md'
          />
        </div>
        <div className='space-y-2'>
          <Label htmlFor='password' className='@sm:text-sm @md:text-base'>
            Password
          </Label>
          <Input
            id='password'
            type='password'
            placeholder='Enter your password'
            className='transition-all duration-200 focus:transform-3d
                       focus:scale-[1.02] focus:shadow-md'
          />
        </div>
        <Button
          className='w-full transform-3d hover:scale-105
                          transition-all duration-200 hover:shadow-lg'
        >
          Sign In
        </Button>
      </CardContent>
    </Card>
  );
}
```

## Next.js Dark Mode Integration

- Use `next-themes` with Tailwind 4 dark mode:

```bash
pnpm install next-themes
```

```tsx
// app/providers.tsx
'use client';

import { ThemeProvider } from 'next-themes';

export function Providers({ children }: { children: React.ReactNode }) {
  return (
    <ThemeProvider attribute='class' defaultTheme='system'>
      {children}
    </ThemeProvider>
  );
}
```

```tsx
// app/layout.tsx
import { Providers } from './providers';

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang='en' suppressHydrationWarning>
      <body>
        <Providers>{children}</Providers>
      </body>
    </html>
  );
}
```

```css
/* Configure dark mode in CSS */
@import 'tailwindcss';
@variant dark (&:where(.dark, .dark *));

@theme {
  --color-background: #ffffff;
  --color-foreground: #0f172a;
}

@media (prefers-color-scheme: dark) {
  @theme {
    --color-background: #0f172a;
    --color-foreground: #f8fafc;
  }
}
```

## Advanced Configuration

- Add a prefix to all Tailwind classes:

```css
@import "tailwindcss" prefix(tw);

/* Results in classes like: */
<div class="tw:flex tw:bg-blue-500 tw:hover:bg-blue-600">
  Prefixed classes
</div>
```

- Configure dark mode:

```css
@import "tailwindcss";
@variant dark (&:where(.dark, .dark *));

/* Usage */
<div class="dark">
  <p class="text-gray-900 dark:text-white">
    Dark mode text
  </p>
</div>
```

- Customize container for Next.js layouts:

```css
@utility container {
  margin-inline: auto;
  padding-inline: 2rem;
  max-width: 1200px;
}

/* For full-width layouts */
@utility container-fluid {
  margin-inline: auto;
  padding-inline: 1rem;
  width: 100%;
}
```

## Next.js Performance Optimizations

- Optimize for production builds:

```css
/* Use CSS layers for better performance */
@import 'tailwindcss';

@layer base {
  /* Base styles that rarely change */
  html {
    scroll-behavior: smooth;
  }
}

@layer components {
  /* Reusable component styles */
  .btn-primary {
    @apply px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors;
  }
}
```

- Use CSS-in-JS alternatives with Tailwind 4:

```tsx
// Using css prop pattern with Tailwind
const buttonStyles =
  'px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors';

export default function Button({ children }: { children: React.ReactNode }) {
  return <button className={buttonStyles}>{children}</button>;
}
```

## Next.js App Router Layouts

- Create responsive layouts with Tailwind 4:

```tsx
// app/layout.tsx - Root layout
export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang='en'>
      <body className='min-h-screen bg-background font-sans antialiased'>
        <div className='relative flex min-h-screen flex-col'>
          <header className='sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60'>
            {/* Header content */}
          </header>
          <main className='flex-1 container mx-auto px-4 py-8'>{children}</main>
          <footer className='border-t bg-muted/50'>{/* Footer content */}</footer>
        </div>
      </body>
    </html>
  );
}
```

- Nested layouts for different sections:

```tsx
// app/dashboard/layout.tsx
export default function DashboardLayout({ children }: { children: React.ReactNode }) {
  return (
    <div className='grid min-h-screen grid-cols-[240px_1fr] lg:grid-cols-[280px_1fr]'>
      <aside className='border-r bg-muted/50 p-6'>
        <nav className='space-y-2'>{/* Navigation items */}</nav>
      </aside>
      <main className='overflow-hidden'>
        <div className='container px-6 py-8'>{children}</div>
      </main>
    </div>
  );
}
```

## Shadcn UI + Tailwind 4 Best Practices Summary

### Component Development Strategy

1. **Always start with Shadcn UI components** - Never build custom UI from scratch when a Shadcn component exists
2. **Enhance with Tailwind 4 features** - Use container queries, 3D transforms, and enhanced gradients to extend Shadcn components
3. **Maintain theme consistency** - Use Shadcn's CSS variables and design tokens with Tailwind 4's CSS-first configuration
4. **Leverage accessibility** - Utilize Radix UI's built-in accessibility features through Shadcn components

### Installation Checklist

- [ ] Install Tailwind CSS 4: `pnpm install tailwindcss@next @tailwindcss/postcss@next`
- [ ] Setup Shadcn UI: `pnpm dlx shadcn@latest init`
- [ ] Install common components: `pnpm dlx shadcn@latest add button card input label form dialog sheet`
- [ ] Configure `globals.css` with both Shadcn variables and Tailwind 4 theme
- [ ] Update `postcss.config.mjs` for Tailwind 4

### Key Integration Points

- **Theme variables**: Combine Shadcn's HSL-based CSS variables with Tailwind 4's `@theme` directive
- **Container queries**: Use `@container` classes on Shadcn components for intrinsic responsive design
- **3D transforms**: Apply `transform-3d` utilities to Shadcn components for modern interactions
- **Enhanced gradients**: Use new gradient syntax with Shadcn's color system
- **Dark mode**: Integrate `next-themes` with Tailwind 4's dark variant and Shadcn's dark mode variables

### Example Component Pattern

```tsx
import { ComponentName } from '@/components/ui/component-name';

export function EnhancedComponent() {
  return (
    <ComponentName
      className='@container transform-3d hover:scale-105
                              transition-all duration-200 hover:shadow-xl
                              bg-gradient-to-r from-primary to-primary/80'
    >
      Content with Shadcn styling + Tailwind 4 enhancements
    </ComponentName>
  );
}
```

This approach ensures you get the best of both worlds: Shadcn's robust, accessible component library enhanced with Tailwind CSS 4's cutting-edge features.
